// Single database schema for multi-tenant application

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  SUPER_ADMIN
  ADMIN
  CASHIER
  VIGILE
}

enum ContractType {
  DAILY
  HOURLY
  FIXED
  FEE
}

enum PayRunType {
  MONTHLY
  WEEKLY
  DAILY
}

enum PayRunStatus {
  DRAFT
  APPROVED
  CLOSED
}

enum PayslipStatus {
  DRAFT
  APPROVED
  PAID
  PARTIAL
  PENDING
}

enum PaymentMode {
  CASH
  BANK_TRANSFER
  ORANGE_MONEY
  WAVE
  OTHER
}

enum LoanStatus {
  ACTIVE
  PAID
  CANCELLED
}

model Company {
  id                       String     @id @default(uuid())
  name                     String
  logoUrl                  String?
  address                  String?
  currency                 String     @default("Fcfa")
  primaryColor             String     @default("#1E40AF")
  secondaryColor           String     @default("#2563EB")
  fixedSalaryDeductionRate Decimal?  @db.Decimal(10, 2) // Deduction amount per absent day for fixed salary employees
  workDaysPerMonth         Int?      @default(22)       // Expected work days per month for fixed salary employees

  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  users                    User[]
  payRuns                  PayRun[]
  superAdminPermissions    SuperAdminPermission[]
}

model Role {
  id     String   @id @default(uuid())
  name   RoleType @unique @default(ADMIN)

  users  User[]
}

model User {
  id           String   @id @default(uuid())
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id])

  fullName     String
  email        String   @unique
  passwordHash String
  isActive     Boolean  @default(true)

  roleId       String
  role         Role     @relation(fields: [roleId], references: [id])

  // Employee-specific fields (optional for non-employee users like super admins)
  position     String?
  contractType ContractType?
  salaryOrRate Decimal?  @db.Decimal(14, 2)
  bankDetails  String?
  active       Boolean? @default(true)
  phone        String?
  hireDate     DateTime?

  // Delegation for vigiles - can validate attendances fully
  canValidateFully Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations that were on Employee
  payslips      Payslip[]
  payments      Payment[]
  workSchedules WorkSchedule[]
  loans         Loan[]

  // Super admin permissions (when user is a super admin)
  grantedPermissions SuperAdminPermission[] @relation("SuperAdminPermissions")
}


model PayRun {
  id          String       @id @default(uuid())
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id])

  periodStart DateTime
  periodEnd   DateTime
  type        PayRunType
  status      PayRunStatus @default(DRAFT)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  payslips    Payslip[]
}

model Payslip {
  id         String   @id @default(uuid())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id])

  payRunId   String
  payRun     PayRun   @relation(fields: [payRunId], references: [id])

  @@unique([employeeId, payRunId])

  gross      Decimal       @default(0) @db.Decimal(14, 2)
  deductions Decimal       @default(0) @db.Decimal(14, 2)
  netPay     Decimal       @default(0) @db.Decimal(14, 2)
  daysWorked Int?
  status     PayslipStatus @default(DRAFT)
  lockedAt   DateTime?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payments   Payment[]
}

model Payment {
  id         String   @id @default(uuid())
  payslipId  String
  payslip    Payslip  @relation(fields: [payslipId], references: [id])

  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id])

  amount     Decimal     @db.Decimal(14, 2)
  mode       PaymentMode
  note       String?
  receiptUrl String?

  createdAt DateTime @default(now())
}

model WorkSchedule {
  id         String   @id @default(uuid())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id])

  startDate   DateTime
  endDate     DateTime
  type        ContractType
  hoursPerDay Int?

  attendances Attendance[]
}

model Attendance {
  id             String       @id @default(uuid())
  workScheduleId String
  workSchedule   WorkSchedule @relation(fields: [workScheduleId], references: [id])

  date        DateTime
  workedHours Int?
  validated   Boolean  @default(false)
  validatedBy String?  // User ID of who validated the attendance
  validatedAt DateTime?
}

model Loan {
  id               String     @id @default(uuid())
  employeeId       String
  employee         User       @relation(fields: [employeeId], references: [id])

  amount           Decimal    @db.Decimal(14, 2) // Montant total du prêt
  remainingAmount  Decimal    @db.Decimal(14, 2) // Montant restant à payer
  monthlyDeduction Decimal    @db.Decimal(14, 2) // Montant déduit par mois
  progress         Decimal    @db.Decimal(5, 2) @default(0) // Pourcentage d'avancement du remboursement
  description      String?
  startDate        DateTime   @default(now())
  endDate          DateTime?  // Date de fin calculée automatiquement
  status           LoanStatus @default(ACTIVE)

  createdBy        String     // User ID of who created the loan
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model SuperAdminPermission {
  id         String   @id @default(uuid())
  superAdminId String
  superAdmin  User    @relation("SuperAdminPermissions", fields: [superAdminId], references: [id])
  companyId   String
  company     Company @relation(fields: [companyId], references: [id])

  grantedBy   String  // User ID of the company admin who granted permission
  grantedAt   DateTime @default(now())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([superAdminId, companyId])
}
